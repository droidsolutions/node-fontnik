# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.7

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-linux:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    # docker:
    #   - image: cimg/node:16.10
    machine:
      image: ubuntu-2004:202010-01
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    working_directory: /prebuilt-binary
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - node/install-packages:
          # If you are using yarn, change the line below from "npm" to "yarn"
          pkg-manager: npm
      - run:
          name: Make Build
          command: make debug
      - run:
          name: Run tests
          command: npm test
      - run:
          name: Package with Prebuildify
          command: npm run prebuildify -- --platform=linux --arch=x64
      - run:
          name: Check directory content
          command: ls -l && ls prebuilds
      - store_artifacts:
          path: /tmp/prebuilds
          destination: linux-x64-binary

  build-darwin:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    # docker:
    #   - image: cimg/node:16.10
    macos: # executor type
      xcode: 14.2.0
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    working_directory: /prebuilt-binary
    steps:
      # Checkout the code as the first step.
      - checkout
      # Next, the node orb's install-packages step will install the dependencies from a package.json.
      # The orb install-packages step will also automatically cache them for faster future runs.
      - node/install-packages:
          # If you are using yarn, change the line below from "npm" to "yarn"
          pkg-manager: npm
      - run:
          name: Make Build
          command: make debug
      - run:
          name: Run tests
          command: npm test
      - run:
          name: Package with Prebuildify
          command: npm run prebuildify -- --platform=darwin --arch=x64
      - run:
          name: Check directory content
          command: ls -l && ls prebuilds
      - store_artifacts:
          path: /tmp/prebuilds
          destination: darwin-x64-binary

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample:
    jobs:
      - build-linux
      - build-darwin
      # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
      # - node/test