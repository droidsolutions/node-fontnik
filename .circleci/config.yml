# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.7

# jobs:
#   build-linux:
#     machine:
#       image: ubuntu-2004:202010-01
#     steps:
#       - checkout
#       - node/install-packages:
#           pkg-manager: npm
#       - run:
#           name: Make Build
#           command: make release
#       # - run:
#       #     name: Run tests
#       #     command: npm test
#       - run:
#           name: Package with Prebuildify
#           command: npm run prebuildify -- --platform=linux --arch=x64
#       - run:
#           name: Check directory content
#           command: ls -l && ls prebuilds
#       - persist_to_workspace:
#           root: prebuilds
#           paths:
#             - linux-x64

#   build-darwin:
#     macos: # executor type
#       xcode: 14.2.0
#     steps:
#       - checkout
#       - node/install-packages:
#           pkg-manager: npm
#       - run:
#           name: Make Build
#           command: make release
#       - run:
#           name: Run tests
#           command: npm test
#       - run:
#           name: Package with Prebuildify
#           command: npm run prebuildify -- --platform=darwin --arch=x64
#       - run:
#           name: Check directory content
#           command: ls -l && ls prebuilds
#       - persist_to_workspace:
#           # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
#           # taken to be the root directory of the workspace.
#           root: prebuilds
#           # Must be relative path from root
#           paths:
#             - darwin-x64
  
#   publish-package:
#     machine:
#       image: ubuntu-2004:202010-01
#     steps:
#       - checkout
#       - node/install-packages:
#           pkg-manager: npm
#       - attach_workspace:
#           at: prebuilds
#       - run:
#           name: LS all
#           command: ls *
#       - run:
#           name: LS prebuilds
#           command: ls prebuilds/linux-x64
#       - run:
#           name: LS prebuilds
#           command: ls prebuilds/darwin-x64


# workflows:
#   # Below is the definition of your workflow.
#   # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
#   # CircleCI will run this workflow on every commit.
#   # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
#   sample:
#     jobs:
#       - build-linux
#       - build-darwin
#       - publish-package:
#           requires:
#             - build-linux
#             - build-darwin
#       # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
#       # - node/test

executors:
  linux: # a Linux VM running Ubuntu 20.04
    machine:
      image: ubuntu-2004:202107-02
  macos: # macos executor running Xcode
    macos:
      xcode: 14.2.0

jobs:
  # Run tests with different configurations
  test:
    parameters:
      os:
        type: executor
      node-version:
        type: string
      build-type:
        type: string
    executor: << parameters.os >>
    steps:
      - checkout
      - node/install:
          node-version: << parameters.node-version >>
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run Setup Scripts
          command: |
            ./scripts/setup.sh --config local.env
            source local.env
      - run:
          name: Make Build
          command: make << parameters.build-type >>
      - run:
          name: Run tests
          command: npm test
      - store_test_results:
          path: test-results

  asan-build:
    executor: linux
    environment:
      BUILDTYPE: debug
      TOOLSET: asan
    steps:
      - checkout
      - node/install:
          node-version: "14"
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run Setup Scripts
          command: |
            ./scripts/setup.sh --config local.env
            source local.env
            export CXXFLAGS="${MASON_SANITIZE_CXXFLAGS} -fno-sanitize-recover=all"
            export LDFLAGS="${MASON_SANITIZE_LDFLAGS}"
            make ${BUILDTYPE}
            export LD_PRELOAD=${MASON_LLVM_RT_PRELOAD}
            export ASAN_OPTIONS=fast_unwind_on_malloc=0:${ASAN_OPTIONS}
            npm test
            unset LD_PRELOAD
      - store_test_results:
          path: test-results
  g-build:
    executor: linux
    environment:
      BUILDTYPE: debug
      CXX: g++-9
      CC: gcc-9
      CXXFLAGS: -fext-numeric-literals
    steps:
      - checkout
      - node/install:
          node-version: "14"
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run Setup Scripts
          command: |
            ./scripts/setup.sh --config local.env
            source local.env
            make ${BUILDTYPE}
            npm test
      - store_test_results:
          path: test-results
  coverage-build:
    executor: linux
    environment:
      BUILDTYPE: debug
    steps:
      - checkout
      - node/install:
          node-version: "14"
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run Setup Scripts
          command: |
            ./scripts/setup.sh --config local.env
            source local.env
            make ${BUILDTYPE}
            npm test
            mason install llvm-cov ${MASON_LLVM_RELEASE}
            mason link llvm-cov ${MASON_LLVM_RELEASE}
            which llvm-cov
            pip install --user codecov
            codecov --gcov-exec "llvm-cov gcov"
      - store_test_results:
          path: test-results
  
  # Build binaries for Linux
  build-linux:
    executor: linux
    steps:
      - checkout
      - node/install:
          node-version: "16"
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run Setup Scripts
          command: |
            ./scripts/setup.sh --config local.env
            source local.env
      - run:
          name: Make Build
          command: make release
      - run:
          name: Package with Prebuildify
          command: npm run prebuildify -- --platform=linux --arch=x64
      - persist_to_workspace:
          root: prebuilds
          paths:
            - linux-x64
  
  # Build binaries for Mac
  build-darwin:
    executor: macos
    steps:
      - checkout
      - node/install:
          node-version: "16"
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run Setup Scripts
          command: |
            ./scripts/setup.sh --config local.env
            source local.env
      - run:
          name: Make Build
          command: make release
      - run:
          name: Package with Prebuildify
          command: npm run prebuildify -- --platform=darwin --arch=x64
      - persist_to_workspace:
          root: prebuilds
          paths:
            - darwin-x64
  
  # Publish packages to NPM
  publish-package:
    executor: linux
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - attach_workspace:
          at: prebuilds
      - run:
          name: LS all
          command: ls *
      - run:
          name: LS prebuilds
          command: ls prebuilds/linux-x64
      - run:
          name: LS prebuilds
          command: ls prebuilds/darwin-x64
      

workflows:
  all-jobs:
    jobs:
      - test:
          matrix:
            parameters:
              os: [linux, macos]
              node-version: ["14", "16"]
              build-type: ["debug", "release"]
      - asan-build
      - g-build
      - coverage-build
      - build-linux:
          requires:
            - test
      - build-darwin:
          requires:
            - test
      - publish-package:
          requires:
            - test
            - build-linux
            - build-darwin
