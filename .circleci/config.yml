# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.7

# jobs:
#   build-linux:
#     machine:
#       image: ubuntu-2004:202010-01
#     steps:
#       - checkout
#       - node/install-packages:
#           pkg-manager: npm
#       - run:
#           name: Make Build
#           command: make release
#       # - run:
#       #     name: Run tests
#       #     command: npm test
#       - run:
#           name: Package with Prebuildify
#           command: npm run prebuildify -- --platform=linux --arch=x64
#       - run:
#           name: Check directory content
#           command: ls -l && ls prebuilds
#       - persist_to_workspace:
#           root: prebuilds
#           paths:
#             - linux-x64

#   build-darwin:
#     macos: # executor type
#       xcode: 14.2.0
#     steps:
#       - checkout
#       - node/install-packages:
#           pkg-manager: npm
#       - run:
#           name: Make Build
#           command: make release
#       - run:
#           name: Run tests
#           command: npm test
#       - run:
#           name: Package with Prebuildify
#           command: npm run prebuildify -- --platform=darwin --arch=x64
#       - run:
#           name: Check directory content
#           command: ls -l && ls prebuilds
#       - persist_to_workspace:
#           # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
#           # taken to be the root directory of the workspace.
#           root: prebuilds
#           # Must be relative path from root
#           paths:
#             - darwin-x64
  
#   publish-package:
#     machine:
#       image: ubuntu-2004:202010-01
#     steps:
#       - checkout
#       - node/install-packages:
#           pkg-manager: npm
#       - attach_workspace:
#           at: prebuilds
#       - run:
#           name: LS all
#           command: ls *
#       - run:
#           name: LS prebuilds
#           command: ls prebuilds/linux-x64
#       - run:
#           name: LS prebuilds
#           command: ls prebuilds/darwin-x64


# workflows:
#   # Below is the definition of your workflow.
#   # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
#   # CircleCI will run this workflow on every commit.
#   # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
#   sample:
#     jobs:
#       - build-linux
#       - build-darwin
#       - publish-package:
#           requires:
#             - build-linux
#             - build-darwin
#       # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
#       # - node/test

executors:
  linux: # a Linux VM running Ubuntu 20.04
    machine:
      image: ubuntu-2004:202107-02
  macos: # macos executor running Xcode
    macos:
      xcode: 14.2.0

jobs:
  test:
    parameters:
      os:
        type: executor
      node-version:
        type: string
      build-type:
        type: string
    executor: << parameters.os >>
    steps:
      - checkout
      - node/install:
          node-version: << parameters.node-version >>
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run Setup Scripts
          command: |
            ./scripts/setup.sh --config local.env
            source local.env
      - run:
          name: Make Build
          command: make << parameters.build-type >>
      - run:
          name: Run tests
          command: npm test

workflows:
  all-tests:
    jobs:
      - test:
          matrix:
            parameters:
              os: [linux, macos]
              node-version: ["12", "14", "16"]
              build-type: ["debug", "release"]
